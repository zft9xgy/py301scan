import configparser

# Script description:
# This script categorizes URLs based on their prefix and saves them in separate files.

config = configparser.ConfigParser()
config.read('config.ini')

# Assuming you add URL_LISTS to the config.ini as shown previously
URL_LISTS = dict(config.items('URL_LISTS'))
DEFAULT_LIST = config['DEFAULT']['DEFAULT_LIST']
INPUT_FILE = config['DEFAULT']['URLS_FILE']


# Leer las URL desde el archivo "lista_de_urls.txt"
with open(INPUT_FILE, "r") as file:
    urls = file.read().splitlines()

# Diccionario para mapear prefijos de URL a listas y directorios
'''
URL_LISTS = {
    "/tr/": "urls/tr.txt",
    "/de/": "urls/de.txt",
    "/es/": "urls/es.txt",
    "/fr/": "urls/fr.txt",
    "/it/": "urls/it.txt",
    "/nl/": "urls/nl.txt",
    "/da/": "urls/da.txt",
    "/sv/": "urls/sv.txt",
    "/id/": "urls/id.txt",
    "/pt-pt/": "urls/pt.txt",
}
'''

# Lista por defecto para las URL que no coinciden con los prefijos anteriores
# DEFAULT_LIST = "urls/com.txt"

# Función para agregar URL a una lista existente


def append_to_list(url, list_filename):
    with open(list_filename, "a") as list_file:
        list_file.write(url + "\n")


# Clasificar las URL en las listas correspondientes
for url in urls:
    categorized = False
    for prefix, list_filename in URL_LISTS.items():
        if prefix in url:
            append_to_list(url, list_filename)
            categorized = True
            break
    if not categorized:
        append_to_list(url, DEFAULT_LIST)

# Imprimir el número de URL en cada lista
for list_filename in URL_LISTS.values():
    with open(list_filename, "r") as list_file:
        num_urls = sum(1 for _ in list_file)
        print(f"{list_filename}: {num_urls} URL(s)")

# Puedes acceder a las listas de URL individualmente utilizando los archivos en el directorio "urls"
# Por ejemplo: "urls/urls-tr.txt" contiene las URL con el prefijo "/tr/"
